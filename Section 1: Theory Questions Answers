# Section 1: Theory Questions Answers

## 1.1 
The `deque` module is part of the **collections** library in Python.

---

## 1.2
1. A tree is a type of graph, but it has no cycles (no loops).
2. A tree always has one root node, and all nodes are connected by exactly one path. In general, a graph doesn’t have these restrictions.

---

## 1.3 
- **Time complexity: measures how long an algorithm takes to run as the input size grows.
- **Space complexity** :measures how much memory (RAM) the algorithm uses as the input size grows.

---

## 1.4 
### Bubble Sort Algorithm:
1. Repeatedly compare two items in a list.
2. If the first one is bigger, swap them.
3. Keep doing this until no more swaps are needed.

### Complexity:
- Worst-case time complexity: O(n²).
- Best-case time complexity:O(n) (if the list is already sorted).
- Space complexity: O(1) (it doesn’t use extra space).

### After the First Pass:
The largest element is guaranteed to be in its correct position (at the end).

---

## 1.5
### LIFO (Last In, First Out):
- The last item added is the first one removed.
- Example: Stack (like a stack of plates where you take the top plate first).

### FIFO (First In, First Out):
- The first item added is the first one removed.
- Example: Queue (like people waiting in line where the first person gets served first).

---

## 1.6 
### Balanced Binary Tree:
- A tree where the left and right subtrees of any node differ in height by no more than 1.

### Best Root:
The middle value of the data keeps the tree as balanced as possible.

### Search Process:
1. Start at the root.
2. Compare the value that is being search for with the current node.
   - If it’s smaller, go left.
   - If it’s bigger, go right.
3. Repeat until you find the value or reach a dead end.
